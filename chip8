#!/usr/bin/env python3

import pygame
import random
import sys
import time

from pygame.locals import *

PIXEL_WIDTH = 20
PIXEL_HEIGHT =20
PIXEL_X_COUNT = 64
PIXEL_Y_COUNT = 32
WINDOW_WIDTH = PIXEL_X_COUNT * PIXEL_WIDTH
WINDOW_HEIGHT = PIXEL_Y_COUNT * PIXEL_HEIGHT

BG_COLOR = (0, 0, 0)
PIXEL_COLOR = (255, 255, 255)

CYCLES_PER_SEC = 1000

KEY_MAPPINGS = [K_x,
                K_1,
                K_2,
                K_3,
                K_q,
                K_w,
                K_e,
                K_a,
                K_s,
                K_d,
                K_z,
                K_c,
                K_4,
                K_r,
                K_f,
                K_v]

class Display:
    def __init__(self):
        self.ROW_COUNT = 32
        self.COL_COUNT = 64
        self.pixels = [[0 for y in range(self.ROW_COUNT)] for x in range(self.COL_COUNT)]

        self.display_surf = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
        pygame.display.set_caption('CHIP8')

        self._update()

    def _update(self):
        self.display_surf.fill(BG_COLOR)

        for p_x in range(self.COL_COUNT):
            for p_y in range(self.ROW_COUNT):
                if self.pixels[p_x][p_y] == 1:
                    d_x = PIXEL_WIDTH * p_x
                    d_y = PIXEL_HEIGHT * p_y
                    pygame.draw.rect(self.display_surf, PIXEL_COLOR, 
                                     (d_x, d_y, PIXEL_WIDTH, PIXEL_HEIGHT))
        pygame.display.flip()

    def clear(self):
        for i in range(self.COL_COUNT):
            for j in range(self.ROW_COUNT):
                self.pixels[i][j] = 0

        self._update()

    def draw_sprite(self, start_x, start_y, n):
        is_collission_detected = False
        sprite_data = memory[i_register:i_register + n + 1]
        sprite_width = 8
        sprite_height = n

        for s_x in range(sprite_width):
            for s_y in range(sprite_height):
                bit = (sprite_data[s_y] >> (7 - s_x)) & 1
                p_x = (start_x + s_x) % self.COL_COUNT
                p_y = (start_y + s_y) % self.ROW_COUNT
                self.pixels[p_x][p_y] ^= bit
                if bit == 1 and self.pixels[p_x][p_y] == 0:
                    is_collission_detected = True

        self._update()

        return is_collission_detected

class Sound_Timer:
    def __init__(self):
        self.TICKS_PER_SEC = 1 / 60
        self.value = 0
        self.last_tick_time = time.time()

    def process(self):
        if self.value != 0:
            print('beep')
            if time.time() - self.last_tick_time > self.TICKS_PER_SEC:
                self.value -= 1
                self.last_tick_time = time.time()

class Delay_Timer:
    def __init__(self):
        self.TICKS_PER_SEC = 1 / 60
        self.value = 0
        self.last_tick_time = time.time()

    def process(self):
        if self.value != 0:
            if time.time() - self.last_tick_time > self.TICKS_PER_SEC:
                self.value -= 1
                self.last_tick_time = time.time()

def load_font():
    font_data = bytes.fromhex('F0909090F0' + # 0
                              '2060202070' + # 1
                              'F010F080F0' + # 2
                              'F010F010F0' + # 3
                              '9090F01010' + # 4
                              'F080F010F0' + # 5
                              'F080F090F0' + # 6
                              'F010204040' + # 7
                              'F090F090F0' + # 8
                              'F090F010F0' + # 9
                              'F090F09090' + # 10
                              'E090E090E0' + # 11
                              'F0808080F0' + # 12
                              'E0909090E0' + # 13
                              'F080F080F0' + # 14
                              'F080F08080')  # 15
    memory[0:81] = font_data

def load_rom(rom_path):
    with open(rom_path, 'rb') as rom:
        i = pc
        for byte in rom.read():
            memory[i] = byte
            i += 1

def fetch_opcode():
    # program counter should always be on an even address
    assert(pc % 2 == 0)

    return memory[pc:pc+2].hex()

def exec_instr(opcode):
    global pc, i_register
    pc += 2

    nnn = int(opcode[1:], 16)
    n = int(opcode[3], 16)
    x = int(opcode[1], 16)
    y = int(opcode[2], 16)
    kk = int(opcode[2:], 16)

    if opcode == '00e0':
        display.clear()
    elif opcode == '00ee':
        pc = stack.pop()
    elif opcode[0] == '1':
        pc = nnn
    elif opcode[0] == '2':
        stack.append(pc)
        pc = nnn
    elif opcode[0] == '3':
        if registers[x] == kk:
            pc += 2
    elif opcode[0] == '4':
        if registers[x] != kk:
            pc += 2
    elif opcode[0] == '6':
        registers[x] = kk
    elif opcode[0] == '7':
        registers[x] += kk
    elif opcode[0] == '8' and opcode[3] == '0':
        registers[x] = registers[y]
    elif opcode[0] == '8' and opcode[3] == '2':
        registers[x] &= registers[y]
    elif opcode[0] == '8' and opcode[3] == '4':
        val = registers[x] + registers[y]
        if val > 255:
            val -= 256
            registers[15] = 1
        else:
            registers[15] = 0
        registers[x] = val
    elif opcode[0] == '8' and opcode[3] == '5':
        val = registers[x] - registers[y]
        if registers[x] > registers[y]:
            registers[15] = 1
        else:
            registers[15] = 0
            val += 256
        registers[x] = val
    elif opcode[0] == '9' and opcode[3] == '0':
        if registers[x] != registers[y]:
            pc += 2
    elif opcode[0] == 'a':
        i_register = nnn
    elif opcode[0] == 'c':
        registers[x] = random.randint(0, 255) & kk
    elif opcode[0] == 'd':
        registers[15] = display.draw_sprite(registers[x],registers[y], n)
    elif opcode[0] == 'e' and opcode[2:] == '9e':
        if pygame.key.get_pressed()[KEY_MAPPINGS[registers[x]]]:
            pc += 2
    elif opcode[0] == 'e' and opcode[2:] == 'a1':
        if not pygame.key.get_pressed()[KEY_MAPPINGS[registers[x]]]:
            pc += 2
    elif opcode[0] == 'f' and opcode[2:] == '07':
        registers[x] = delay_timer.value
    elif opcode[0] == 'f' and opcode[2:] == '15':
        delay_timer.value = registers[x]
    elif opcode[0] == 'f' and opcode[2:] == '18':
        sound_timer.value = registers[x]
    elif opcode[0] == 'f' and opcode[2:] == '1e':
        i_register += registers[x]
    elif opcode[0] == 'f' and opcode[2:] == '29':
        i_register = registers[x] * 5
    elif opcode[0] == 'f' and opcode[2:] == '33':
        hundreds = (registers[x] % 1000) // 100
        tens = (registers[x] % 100) // 10
        ones = registers[x] % 10
        memory[i_register] = hundreds
        memory[i_register + 1] = tens
        memory[i_register + 2] = ones
    elif opcode[0] == 'f' and opcode[2:] == '55':
        mem_index = i_register
        for reg_index in range(x + 1):
            memory[mem_index + reg_index] = registers[reg_index]
    elif opcode[0] == 'f' and opcode[2:] == '65':
        mem_index = i_register
        for reg_index in range(x + 1):
            registers[reg_index] = memory[mem_index + reg_index]
    else:
        print('Opcode ', opcode, ' not supported')
        _ = input()
        exit()

pygame.init()
cycle_clock = pygame.time.Clock()

display = Display()
delay_timer = Delay_Timer()
sound_timer = Sound_Timer()

registers = [0 for i in range(16)]
i_register = 0
pc = 512
memory = bytearray(4096)
stack = []

load_font()
rom_path = sys.argv[1]
load_rom(rom_path)

while True:
    pygame.event.pump()
    delay_timer.process()
    sound_timer.process()
    opcode = fetch_opcode()
    exec_instr(opcode)
    cycle_clock.tick(CYCLES_PER_SEC)
